/* eslint-disable react-native/no-inline-styles */
import { useTheme } from '@rneui/themed';
import { useIsLogin, useNavigation } from 'hooks';
import React, { memo, useState } from 'react';
import { Platform, Vibration } from 'react-native';
import { RNCamera, RNCameraProps } from 'react-native-camera';
/* eslint-disable react-hooks/exhaustive-deps */
import Header from 'components/Header';
import IconButton from 'components/IconButton';
import Text from 'components/Text';
import View from 'components/View';
import {
    NAVIGATION_ACCOUNT_STACK,
    NAVIGATION_AUTH_STACK,
    NAVIGATION_TO_EDIT_REFERRAL_SCREEN,
} from 'constants/routes';
import withAuth from 'hoc/withAuth';
import { split } from 'lodash';
import BarcodeMask from 'react-native-barcode-mask';
import { isEmpty } from 'utils/helpers';
import QRCodeEvent from './components/QRCodeEvent';
import QRCodeProduct from './components/QRCodeProduct';

// interface Props {
//     navigation: StackNavigationProp<any, any>;
// }

const QR_DATA_TYPE = {
    //NTL_EVENTQR:event
    NTL_EVENTQR: 'NTL_EVENTQR',
    //
    NTL_PRODUCT: 'NTL_PRODUCT',
    //https://...
    NTL_URL: 'NTL_URL',
    //
    NTL_PRODUCT_BARCODE: 'NTL_PRODUCT_BARCODE',
    //NTL_REFERRAL:referral code
    NTL_REFERRAL: 'NTL_REFERRAL',
};

const QRCodeScreen = memo(function QRCodeScreen() {
    //hooks
    const { theme } = useTheme();
    const isLogin = useIsLogin();
    const navigation = useNavigation();
    //ref
    //state
    const [flash, setFlash] = useState(false);
    const [qrCodeType, setQRCodeType] = useState<any>(null);
    const [qrCodeData, setQRCodeData] = useState<any>(null);
    //value
    const cameraProps: RNCameraProps = {};
    //check camera
    if (Platform.OS === 'android') {
        // cameraProps.googleVisionBarcodeType =
        //     RNCamera.Constants.GoogleVisionBarcodeDetection.BarcodeType.QR_CODE;
        cameraProps.onGoogleVisionBarcodesDetected = ({ barcodes }) => {
            if (barcodes.length > 0 && barcodes[0].data && isEmpty(qrCodeType)) {
                if (!isLogin) {
                    navigation.navigate(NAVIGATION_AUTH_STACK);
                    return;
                }
                //ngăn quét qr liên tục
                handleScanBarcodesSuccess(barcodes[0].data);
                Vibration.vibrate();
            }
        };
    } else {
        // cameraProps.barCodeTypes = [RNCamera.Constants.BarCodeType.qr];
        cameraProps.onBarCodeRead = (data) => {
            if (data.data && isEmpty(qrCodeType)) {
                if (!isLogin) {
                    navigation.navigate(NAVIGATION_AUTH_STACK);
                    return;
                }
                handleScanBarcodesSuccess(data.data);
                Vibration.vibrate();
            }
        };
    }
    //effect

    //render
    const renderAction = () => {
        switch (qrCodeType) {
            case QR_DATA_TYPE.NTL_EVENTQR:
                return (
                    <QRCodeEvent
                        qr_type={qrCodeType}
                        qr_data={qrCodeData}
                        resetQRCode={resetQRCode}
                    />
                );
            case QR_DATA_TYPE.NTL_PRODUCT:
                return (
                    <QRCodeProduct
                        qr_type={qrCodeType}
                        qr_data={qrCodeData}
                        resetQRCode={resetQRCode}
                    />
                );
            case QR_DATA_TYPE.NTL_REFERRAL:
                navigation.navigate(NAVIGATION_ACCOUNT_STACK, {
                    screen: NAVIGATION_TO_EDIT_REFERRAL_SCREEN,
                    params: {
                        referral_code: qrCodeData,
                    },
                });
                break;
            default:
                break;
        }
    };

    //handle
    //--scan qr success
    const handleScanBarcodesSuccess = (data: string) => {
        // checkQrCodeAndUpdateQrScore(qrCodeData);

        const dataSplit = split(data, ':') || [];
        console.log('dataSplit ', dataSplit);
        switch (dataSplit[0]) {
            case QR_DATA_TYPE.NTL_EVENTQR:
                setQRCodeType(QR_DATA_TYPE.NTL_EVENTQR);
                setQRCodeData(dataSplit[1]);
                break;
            case QR_DATA_TYPE.NTL_REFERRAL:
                setQRCodeType(QR_DATA_TYPE.NTL_REFERRAL);
                setQRCodeData(dataSplit[1]);
                break;
            default:
                setQRCodeType(QR_DATA_TYPE.NTL_PRODUCT);
                setQRCodeData(data);
        }
    };

    const resetQRCode = () => {
        setQRCodeData(null);
        setQRCodeType(null);
    };
    //navigate

    return (
        <>
            <Header
                leftComponent={
                    <IconButton
                        type="ionicon"
                        name="arrow-back-outline"
                        onPress={navigation.goBack}
                        size={theme.typography.title3}
                        color={theme.colors.white_[10]}
                    />
                }
                centerComponent={{
                    text: 'Quét mã QR',
                    style: { fontSize: theme.typography.title2, color: theme.colors.white_[10] },
                }}
                rightComponent={
                    <IconButton
                        type="ionicon"
                        name={flash ? 'flash-sharp' : 'flash-off-sharp'}
                        onPress={() => setFlash((pre) => !pre)}
                        size={theme.typography.title3}
                        color={theme.colors.white_[10]}
                    />
                }
            />
            {/* camera */}
            <RNCamera
                // ref={cameraRef}
                style={{
                    height: theme.dimens.height,
                    backgroundColor: theme.colors.main["600"],
                    position: 'relative',
                }}
                type={RNCamera.Constants.Type.back}
                flashMode={
                    flash ? RNCamera.Constants.FlashMode.torch : RNCamera.Constants.FlashMode.off
                }
                captureAudio={false}
                {...cameraProps}
            >
                {/* top - content */}
                <View
                    style={{
                        // height: '100%',
                        position: 'absolute',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                        // backgroundColor: 'red',
                        left: 0,
                        right: 0,
                        top: theme.dimens.verticalScale(200),
                        zIndex: 1,
                    }}
                >
                    <Text ta="center" color={theme.colors.main['600']} fw="bold" size={'title1'}>
                        VDC-QRCode
                    </Text>
                </View>
                {/* barcode mask */}
                <BarcodeMask
                    edgeColor={theme.colors.main["600"]}
                    edgeWidth={theme.dimens.scale(30)}
                    edgeHeight={theme.dimens.scale(30)}
                    animatedLineColor={theme.colors.main["600"]}
                    animatedLineHeight={theme.dimens.verticalScale(20)}
                    showAnimatedLine={false}
                    backgroundColor={'rgba(0,0,0, 0.5)'}
                />
                {/* intro */}
                <Text
                    style={{
                        padding: theme.spacings.medium,
                        paddingTop: theme.spacings.extraLarge,
                        textAlign: 'center',
                        color: theme.colors.white_[10],
                        position: 'absolute',
                        bottom: theme.dimens.verticalScale(50),
                    }}
                    p={'medium'}
                    pt="extraLarge"
                    ta="center"
                    color={theme.colors.white_[10]}
                >
                    Quét mã QR để tích điểm, thanh toán và sử dụng các dịch vụ khác tại Vua Dụng Cụ
                </Text>
                {/* bottom */}
                {/* <View
                    style={{
                        position: 'absolute',
                        left: 0,
                        right: 0,
                        top: theme.dimens.height * 0.82,
                    }}
                >
                    <Button
                        title={'Chọn ảnh QR từ thư viện'}
                        type="clear"
                        icon={{
                            type: 'ionicon',
                            name: 'images-outline',
                            color: theme.colors.white_[10],
                        }}
                        titleStyle={{ color: theme.colors.white_[10] }}
                        onPress={handleGetImageQrCode}
                        disabled
                    />
                </View> */}
            </RNCamera>
            {/* action */}
            {renderAction()}
        </>
    );
});

export default withAuth(QRCodeScreen, true);
// export default QRCodeScreen;

// const handleGetImageQrCode = () => {
//     launchImageLibrary(
//         {
//             mediaType: 'mixed',
//             // saveToPhotos: true,
//             maxWidth: 100,
//             maxHeight: 100,
//             // includeBase64: true,
//         },
//         (result) => {
//             console.log('result e ', result);
//             RNQRGenerator.detect({
//                 uri: result.uri,
//                 // base64:
//             })
//                 .then((resultQr) => {
//                     const { values } = resultQr; // Array of detected QR code values. Empty if nothing found.
//                     console.log('result qr ', resultQr);
//                 })
//                 .catch((error) => console.log('Cannot detect QR code in image', error));
//         }
//     );
// };
