/* eslint-disable react-hooks/exhaustive-deps */
// import { useEffect, useRef, useState } from 'react';
// import { InteractionManager } from 'react-native';
// import { TransitioningView } from 'react-native-reanimated';

import { useEffect, useRef, useState } from 'react';
import { Animated, Easing, InteractionManager } from 'react-native';

// export const useAfterInteractions = () => {
//     const [interactionsComplete, setInteractionsComplete] = useState(false);

//     const subscriptionRef: any = useRef(null);

//     const transitionRef = useRef<TransitioningView>(null);

//     useEffect(() => {
//         subscriptionRef.current = InteractionManager.runAfterInteractions(() => {
//             transitionRef.current?.animateNextTransition();
//             setInteractionsComplete(true);
//             subscriptionRef.current = null;
//         });
//         return () => {
//             subscriptionRef.current?.cancel();
//         };
//     }, []);

//     return {
//         interactionsComplete,
//         transitionRef,
//     };
// };

export const useAfterInteractions = () => {
    const [interactionsComplete, setInteractionsComplete] = useState(false);
    const animateTransition = useRef(new Animated.Value(0)).current;

    useEffect(() => {
        const interactionCallback = () => {
            setInteractionsComplete(true);
        };

        const interactionSubscription =
            InteractionManager.runAfterInteractions(interactionCallback);

        return () => {
            interactionSubscription.cancel();
        };
    }, [animateTransition]);

    useEffect(() => {
        if (interactionsComplete) {
            Animated.timing(animateTransition, {
                toValue: 1,
                duration: 100, // Adjust the duration as needed
                easing: Easing.ease,
                useNativeDriver: false, // Adjust as needed
            }).start();
        }
    }, [interactionsComplete]);

    return {
        interactionsComplete,
        animateTransition,
    };
};
